#!/usr/bin/env python3

import sys
import os
import shutil
from subprocess import check_call
from pathlib import Path
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.ticker import LogFormatterSciNotation
from collections import defaultdict
from cycler import cycler
import argparse
import json

OUTPUT_DIR = 'plots'
TIMINGS_DIR = 'timings'

os.chdir(str(Path(__file__).parent))

# See https://github.com/matplotlib/matplotlib/pull/9255
CB_color_cycle = list(map(lambda x: '#' + x,
['006BA4', 'FF800E', 'ABABAB', '595959', '5F9ED1', 'C85200', '898989', 'A2C8EC', 'FFBC79', 'CFCFCF']
))
matplotlib.rc('axes', prop_cycle=cycler(color=CB_color_cycle))

def savefig(fig, lgd, filename):
	print("Saving %s" % (filename,))
	fig.savefig(filename, bbox_extra_artists=(lgd,), bbox_inches='tight')

	return
	# savefig takes a long time, so do it in a subprocess
	try:
		pid = os.fork()
	except OSError:
		pid = -1
	if pid == 0:
		try:
			fig.savefig(filename)
		except KeyboardInterrupt:
			pass
		sys.exit(0)
	elif pid == -1:
		print("Saving %s in current process" % (filename,))
		fig.savefig(filename)
	else:
		print("Saving %s in child %d" % (filename, pid))


def generate_plots(timings, config, output_dir):
	plot_values = defaultdict(lambda: defaultdict(list))

	line_formats = defaultdict(dict)
	legend_names = {}
	plot_names = {}

	for r in timings:
		legend_key = tuple(r[o] for o in config['legend_keys'])
		if legend_key not in legend_names:
			legend_names[legend_key] = config['legend_format'](r)

		plot_key = tuple(r[o] for o in config['plot_keys'])
		if plot_key not in plot_names:
			plot_names[plot_key] = config['plot_format'](r)

		if legend_key not in line_formats[plot_key]:
			line_formats[plot_key][legend_key] = config['line_format'](r)

		plot_values[plot_key][legend_key].append((config['X_axis'][1](r), config['Y_axis'][1](r)))

	keys = sorted(plot_values.keys())

	for i, plot_key in enumerate(keys):
		plot_name = plot_names[plot_key]

		fig = plt.figure()
		ax = fig.add_subplot(1, 1, 1, title=plot_name)
		xs = []
		ys = []
		for legend_key, values in plot_values[plot_key].items():
			x = list(map(lambda v: v[0], values))
			y = list(map(lambda v: v[1], values))
			xs += x
			ys += y

			same_x = defaultdict(list)
			for xv, yv in values:
				same_x[xv].append(yv)

			name = legend_names[legend_key]
			color, marker, face_color = line_formats[plot_key][legend_key]
			if config['line']:
				marker += '--'
			ax.plot(x, y, marker, color=color, label=name, mfc=face_color)

			if config['mean_same_x']:
				for xv, yvs in same_x.items():
					if len(yvs) == 1:
						continue

					mean = sorted(yvs)[len(yvs) // 2]

					ax.plot([xv - 0.05, xv + 0.05], [mean, mean], color='green')
					#print(xv, mean)

					#ax.errorbar([xv], [avg], yerr=[[avg - min(yvs)], [max(yvs) - avg]], fmt='none', capsize=10, barsabove=True, color=color)
			if config.get('min_same_x'):
				for xv, yvs in same_x.items():
					if len(yvs) == 1:
						continue

					minv = min(yvs)

					ax.plot([xv - 0.05, xv + 0.05], [minv, minv], color='green')

		ax.set_xlabel(config['X_axis'][0])
		ax.set_ylabel(config['Y_axis'][0])

		if config['logy'] and config['logx']:
			ax.loglog()
		elif config['logx']:
			ax.semilogx(basex=2)
			ax.xaxis.set_major_formatter(LogFormatterSciNotation(2))
			ax.set_xticks(xs)

		lgd = ax.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
		ax.grid()

		fig.tight_layout()

		savefig(fig, lgd, '%s/%s.pdf' % (output_dir, plot_name))

		plt.close(fig)


def legend_format(t):
	return ''.join([
			'old' if t['old_streams'] else 'new',
			' compression' if t['compression'] else '',
			' readahead' if t['readahead'] else ''])


def line_format(t):
	marker = 'x' if t['old_streams'] else 'o'
	rc = t['readahead'] * 2 + t['compression']
	colors = CB_color_cycle

	return (colors[rc], marker, None if t['old_streams'] else 'none')


def plot_format(t):
	test_names = ['write_single', 'write_single_chunked', 'read_single', 'read_back_single', 'merge', 'merge_single_file', 'distribute', 'binary_search']
	test_name = test_names[t['test']]

	item_names = ['int', 'std::string', 'keyed_struct']
	item_name = item_names[t['item_type']]

	name = '%s: %s' % (test_name, item_name)
	if t['parameter'] != 0:
		name += ', k = %s' % t['parameter']

	name += ', file_size = %s MiB' % t['file_size']

	return name


def fix_timing(t):
	defaults = {
		'job_threads': 0 if t['old_streams'] else 4
	}

	for k, v in defaults.items():
		if k not in t:
			t[k] = v

	return t


default_config = {
	'Y_axis': ('duration (s)', lambda r: r['duration']),
	'X_axis': None,
	'legend_keys': ['old_streams', 'compression', 'readahead'],
	'plot_keys': ['test', 'item_type', 'parameter', 'file_size'],
	'logx': False,
	'logy': False,
	'mean_same_x': False,
	'line': False,

	# Functions
	'legend_format': legend_format,
	'line_format': line_format,
	'plot_format': plot_format,
}


if __name__ == '__main__':
	plot_config = {
		'timing_all': {
			'X_axis': ('block_size (bytes)', lambda r: r['block_size']),
			'logx': True,
			'line': True,
		},
		'timing_jobs': {
			'X_axis': ('job threads', lambda r: r['job_threads']),
		},
		'timing_single_merge_jobs': {
			'X_axis': ('job threads', lambda r: r['job_threads']),
		},
		'timing_merge_fs': {
			'X_axis': ('new streams', lambda r: 1 - r['old_streams']),
			'mean_same_x': True,
		},
		'timing_merge_fs2': {
			'X_axis': ('new streams', lambda r: 1 - r['old_streams']),
			'mean_same_x': True,
		},
		'timing_read_write_old': {
			'X_axis': ('new streams', lambda r: 1 - r['old_streams']),
			'min_same_x': True,
		},
		'timing_read_write_new': {
			'X_axis': ('new streams', lambda r: 1 - r['old_streams']),
			'min_same_x': True,
		},
		'timing_single_merge': {
			'X_axis': ('new streams', lambda r: 1 - r['old_streams']),
			'min_same_x': True,
		},
		'timing_single_merge_new': {
			'X_axis': ('new streams', lambda r: 1 - r['old_streams']),
			'min_same_x': True,
		},
	}

	parser = argparse.ArgumentParser()
	parser.add_argument('files', nargs='+')
	args = parser.parse_args()

	if args.files == ['all']:
		args.files = plot_config.keys()

	for fname in args.files:
		fname = fname.split('/')[-1]
		config = plot_config[fname.split('.')[0]]
		name = fname.split('.')[0]
		with open(TIMINGS_DIR + '/' + fname, 'r') as f:
			timings = [fix_timing(json.loads(l)) for l in f]

		out = Path(OUTPUT_DIR) / name
		shutil.rmtree(out, ignore_errors=True)
		out.mkdir(parents=True, exist_ok=True)

		config = {**default_config, **config}
		generate_plots(timings, config, out)

		plot_files = sorted(out.iterdir(), key=lambda p: p.lstat().st_ctime)

		print('Creating %s.pdf' % name)
		check_call(['pdfunite'] + plot_files + ['%s/%s.pdf' % (OUTPUT_DIR, name)])
